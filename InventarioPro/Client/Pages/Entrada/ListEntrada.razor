@page "/ListaEntrada"
@using InventarioPro.Shared.DTOS.Empresa
@using Microsoft.AspNetCore.Components
@using OfficeOpenXml
@using Radzen
@using System.Collections.Generic
@using System.Linq
@using InventarioPro.Shared.DTOS.Entrada
@using InventarioPro.Shared.DTOS.Producto
@inject SweetAlertService swal
@using Radzen
@using iText.IO.Image
@using iText.Kernel.Colors
@using iText.Kernel.Geom
@using iText.Kernel.Pdf
@using iText.Layout
@using iText.Layout.Element
@inject IJSRuntime jsruntime;

@inject HttpClient Http
@inject Radzen.DialogService DialogService
<PageTitle>Entrada de Productos</PageTitle>

<div class="header">
    <h2>Entrada de Productos</h2>
    <RadzenButton Text="Nueva Entrada" Click="OpenAddProductDialog" Style="margin-bottom: 10px;" />
</div>

<!-- Contenedor para el formulario de búsqueda -->
<div class="mb-3">
    <label>Fecha Inicio:</label>
    <RadzenDatePicker @bind-Value="fechaInicio" Style="margin-right: 10px;" />

    <label>Fecha Fin:</label>
    <RadzenDatePicker @bind-Value="fechaFin" Style="margin-right: 10px;" />

    <RadzenButton Text="Buscar" Icon="search" Click="FiltrarPorFecha" ButtonStyle="ButtonStyle.Primary" Style="margin-left: 10px;" />
</div>

<RadzenButton Text="Exportar a Excel" Click="exportarEntradasExcel" Icon="folder_open" />
<RadzenButton Text="Exportar a PDF" Click="ExportarEntradasPDF" Icon="picture_as_pdf" />

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true"
                AllowSorting="true" PageSize="5" AllowPaging="true" Data="@listentrada_DTO"
                ColumnWidth="300px" ShowPagingSummary="true">
    <Columns>
        <!-- Columna de Fecha -->
        <RadzenDataGridColumn Property="Fecha" Title="Fecha" Width="160px" />

        <!-- Columna de Monto Total -->
        <RadzenDataGridColumn Property="MontoTotal" Title="Monto Total" Width="200px">
            <Template Context="entrada">
                @String.Format("RD$ {0:N2}", entrada.MontoTotal)
            </Template>
        </RadzenDataGridColumn>

        <!-- Columna de Producto -->
        <RadzenDataGridColumn Title="Producto" Width="200px">
            <Template Context="entrada">
                @foreach (var productoDetalle in entrada.entradaDetalle_DTO)
                {
                    // Buscar el producto por su IdProducto
                    var producto = productos.FirstOrDefault(p => p.Id == productoDetalle.IdProducto);
                    if (producto != null)
                    {
                        <div>@producto.Nombre</div>
                    }
                    else
                    {
                        <div>Producto no encontrado</div>
                    }
                }
            </Template>
        </RadzenDataGridColumn>

        <!-- Columna de Cantidad -->
        <RadzenDataGridColumn Title="Cantidad" Width="150px">
            <Template Context="entrada">
                @foreach (var productoDetalle in entrada.entradaDetalle_DTO)
                {
                    <div>@productoDetalle.Cantidad</div>
                }
            </Template>
        </RadzenDataGridColumn>

        <!-- Columna de Costo -->
        <RadzenDataGridColumn Title="Costo" Width="150px">
            <Template Context="entrada">
                @foreach (var productoDetalle in entrada.entradaDetalle_DTO)
                {
                    // Buscar el producto por su IdProducto
                    var producto = productos.FirstOrDefault(p => p.Id == productoDetalle.IdProducto);
                    if (producto != null)
                    {
                        <div>@String.Format("RD$ {0:N2}", producto.Costo)</div> <!-- Muestra el costo formateado como moneda -->
                    }
                    else
                    {
                        <div>No disponible</div>
                    }
                }
            </Template>
        </RadzenDataGridColumn>

        <!-- Columna de Acciones -->
        <RadzenDataGridColumn Width="200px" Title="Acciones">
            <Template Context="entrada">
                <button class="btn btn-warning btn-sm" @onclick="() => EditarEntrada(entrada.Id)" style="margin-right: 10px;">
                    <i class="bi bi-pencil"></i> Editar
                </button>
                <button class="btn btn-danger btn-sm" @onclick="() => EliminarEntrada()">
                    <i class="bi bi-trash"></i> Eliminar
                </button>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

<style>
    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    h2 {
        margin: 0;
        font-size: 24px;
    }

    .filters {
        margin-bottom: 20px;
    }
</style>



@code {

    private List<Entrada_DTO> Entradas = new List<Entrada_DTO>();
    private Entrada_DTO entrada_DTO = new Entrada_DTO();
    private Entrada_DTO NuevaEntrada = new Entrada_DTO();
    private List<Entrada_DTO> listentrada_DTO = new List<Entrada_DTO>();
    private List<Entrada_DTO> listentrada_DTO2 = new List<Entrada_DTO>();
    private DateTime? fechaInicio;
    private DateTime? fechaFin;
    private Empresa_DTO empresa;
    private List<Producto_DTO> productos;




    protected override async Task OnInitializedAsync()
    {
        try
        {
            listentrada_DTO = await Http.GetFromJsonAsync<List<Entrada_DTO>>("api/entrada/getentrada");

            listentrada_DTO2 = listentrada_DTO;

            var empresaResponse = await Http.GetAsync("api/empresa/1");
            await ObtenerProductosDesdeApi();

            if (empresaResponse.IsSuccessStatusCode)
            {
                empresa = await empresaResponse.Content.ReadFromJsonAsync<Empresa_DTO>();
            }
            else
            {
                empresa = new Empresa_DTO
                    {
                        Id = 0, 
                        RNC = "Desconocido",  
                        Nombre = "Desconocido", 
                        Direccion = "Desconocida", 
                        Telefono = "Desconocido", 
                        Logo = string.Empty, 
                        PermitirCargaData = false 
                    };
                Console.WriteLine($"Error al obtener la empresa: {empresaResponse.StatusCode}");
            }
        }
        catch (HttpRequestException ex)
        {
            Console.WriteLine($"Error en la solicitud HTTP: {ex.Message}");
        }
    }
    private async Task OpenAddProductDialog()
    {

        var result = await DialogService.OpenAsync<FormEntrada>(null);

        if (result != null)
        {
            listentrada_DTO.Add((Entrada_DTO)result);
            listentrada_DTO = listentrada_DTO.ToList();
            StateHasChanged();
        }


    }
    private bool MostrarFormulario = false;

    // Modelo de entrada


    // Método para abrir el formulario
    private async Task EditarEntrada(int id)
    {
        Console.WriteLine(id);

        var item = listentrada_DTO.FirstOrDefault(p => p.Id == id);

        await DialogService.OpenAsync<FormEntrada>(
       null,
            new Dictionary<string, object> { { "entrada_DTO", item } }
        );




    }
    // Método para filtrar las entradas por fecha
    private void FiltrarPorFecha()
    {
        if (fechaInicio.HasValue && fechaFin.HasValue)
        {
            // Filtra la lista original usando las fechas seleccionadas
            listentrada_DTO2 = listentrada_DTO
             .Where(e => e.Fecha.Date >= fechaInicio.Value.Date && e.Fecha.Date <= fechaFin.Value.Date)
             .ToList();
            fechaInicio = new DateTime();
            fechaFin=new DateTime();
        }
        else
        {

        }
    }
    private async Task ObtenerProductosDesdeApi()
    {
        try
        {
            var response = await Http.GetFromJsonAsync<List<Producto_DTO>>("api/producto/GetProductos");
            if (response != null)
            {
                productos = response;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error al obtener productos: {ex.Message}");
        }
    }
    // Función que devuelve una lista de productos con el detalle de la cantidad
    private List<(int IdProducto, string NombreProducto)> ObtenerDetallesProductos()
    {
        var detalles = new List<(int, string)>();

        foreach (var entrada in listentrada_DTO)
        {
            foreach (var detalle in entrada.entradaDetalle_DTO)
            {
                var producto = productos.FirstOrDefault(p => p.Id == detalle.IdProducto);
                if (producto != null && !detalles.Any(d => d.Item1 == producto.Id))
                {
                    detalles.Add((producto.Id, producto.Nombre));
                }
            }
        }

        return detalles;
    }
    // Método para cerrar el formulario
    private void CerrarFormulario()
    {
        MostrarFormulario = false;
    }

    public void exportarEntradasExcel()
    {
        if (listentrada_DTO2 == null || !listentrada_DTO2.Any())
        {
            Console.WriteLine("No hay entradas para exportar.");
            return;
        }

        string[] cabecerasTabla = { "Fecha", "Monto Total", "Producto", "Cantidad", "Precio", "Sub Monto Total" };
        string[] propiedadesMostrar = { "Fecha", "MontoTotal" };

        using (MemoryStream ms = new MemoryStream())
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

            using (ExcelPackage ep = new ExcelPackage())
            {
                var worksheet = ep.Workbook.Worksheets.Add("Entradas");

                // Escribir cabeceras
                for (int i = 0; i < cabecerasTabla.Length; i++)
                {
                    worksheet.Column(i + 1).Width = 20;
                    worksheet.Cells[1, i + 1].Value = cabecerasTabla[i];
                }

                // Escribir los datos de las entradas
                int fila = 2;
                foreach (var entrada in listentrada_DTO2)
                {
                    int col = 1;

                    // Escribir propiedades de la entrada (Fecha y Monto Total)
                    foreach (string propiedad in propiedadesMostrar)
                    {
                        worksheet.Cells[fila, col].Value = entrada.GetType().GetProperty(propiedad)?.GetValue(entrada)?.ToString() ?? "N/A";
                        col++;
                    }

                    // Escribir los detalles de la entrada en celdas separadas
                    foreach (var detalle in entrada.entradaDetalle_DTO)
                    {
                        worksheet.Cells[fila, col].Value = detalle.IdProducto;
                        col++;
                        worksheet.Cells[fila, col].Value = detalle.Cantidad;
                        col++;
                        worksheet.Cells[fila, col].Value = detalle.Costo;
                        col++;
                        worksheet.Cells[fila, col].Value = detalle.SubMontoTotal;
                        col++;

                        fila++;
                    }
                }

                ep.SaveAs(ms);
                byte[] buffer = ms.ToArray();
                string base64 = Convert.ToBase64String(buffer);
                string excel = "data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64," + base64;
                jsruntime.InvokeVoidAsync("descargarExcel", excel);
            }
        }
    }

    public async Task ExportarEntradasPDF()
    {
        if (listentrada_DTO2 == null || !listentrada_DTO2.Any())
        {
            Console.WriteLine("No hay entradas para exportar.");
            return;
        }

        string empresaNombre = empresa.Nombre;
        string empresaDireccion = empresa.Direccion;
        string empresaTelefono = empresa.Telefono;
        string empresaRNC = empresa.RNC;
        string logoBase64 = empresa.Logo;

        using (MemoryStream ms = new MemoryStream())
        {
            PdfWriter writer = new PdfWriter(ms);
            using (var pdfDoc = new PdfDocument(writer))
            {
                Document doc = new Document(pdfDoc, PageSize.A4);
                doc.SetMargins(40, 40, 60, 40);

                if (!string.IsNullOrEmpty(logoBase64))
                {
                    try
                    {
                        byte[] logoBytes = Convert.FromBase64String(logoBase64);
                        ImageData logoImage = ImageDataFactory.Create(logoBytes);
                        Image logo = new Image(logoImage)
                            .SetWidth(120)
                            .SetHeight(60);
                        logo.SetFixedPosition(30, 750);
                        doc.Add(logo);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine($"Error al cargar el logo: {ex.Message}");
                    }
                }

                Paragraph empresaInfo = new Paragraph()
                    .Add(new Text(empresaNombre).SetBold().SetFontSize(18))
                    .Add(new Text("\n" + empresaDireccion).SetFontSize(12))
                    .Add(new Text("\nTeléfono: " + empresaTelefono).SetFontSize(12))
                    .Add(new Text("\nEmail: " + empresaRNC).SetFontSize(12))
                    .SetTextAlignment(iText.Layout.Properties.TextAlignment.LEFT)
                    .SetMarginTop(40)
                    .SetMarginBottom(25);
                doc.Add(empresaInfo);

                Paragraph p1 = new Paragraph("Reporte de Entradas")
                    .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                    .SetFontSize(24)
                    .SetBold()
                    .SetFontColor(new DeviceRgb(0, 123, 255))
                    .SetMarginBottom(15);
                doc.Add(p1);

                Paragraph fechaExportacion = new Paragraph("Fecha de Exportación: " + DateTime.Now.ToString("dd/MM/yyyy"))
                    .SetTextAlignment(iText.Layout.Properties.TextAlignment.RIGHT)
                    .SetFontSize(12)
                    .SetFontColor(new DeviceRgb(169, 169, 169))
                    .SetMarginBottom(25);
                doc.Add(fechaExportacion);

                Table table = new Table(5, true); // 5 columnas (sin Monto Total)
                table.SetWidthPercent(100);
                table.SetMarginBottom(30);

                // Cabeceras de tabla
                table.AddHeaderCell(new Cell().Add(new Paragraph("Fecha"))
                    .SetBackgroundColor(new DeviceRgb(173, 216, 230))
                    .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                    .SetBold()
                    .SetFontColor(new DeviceRgb(255, 255, 255))
                    .SetPadding(10));
                table.AddHeaderCell(new Cell().Add(new Paragraph("Producto"))
                    .SetBackgroundColor(new DeviceRgb(173, 216, 230))
                    .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                    .SetBold()
                    .SetFontColor(new DeviceRgb(255, 255, 255))
                    .SetPadding(10));
                table.AddHeaderCell(new Cell().Add(new Paragraph("Cantidad"))
                    .SetBackgroundColor(new DeviceRgb(173, 216, 230))
                    .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                    .SetBold()
                    .SetFontColor(new DeviceRgb(255, 255, 255))
                    .SetPadding(10));
                table.AddHeaderCell(new Cell().Add(new Paragraph("Precio"))
                    .SetBackgroundColor(new DeviceRgb(173, 216, 230))
                    .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                    .SetBold()
                    .SetFontColor(new DeviceRgb(255, 255, 255))
                    .SetPadding(10));
                table.AddHeaderCell(new Cell().Add(new Paragraph("Sub Monto Total"))
                    .SetBackgroundColor(new DeviceRgb(173, 216, 230))
                    .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                    .SetBold()
                    .SetFontColor(new DeviceRgb(255, 255, 255))
                    .SetPadding(10));

                decimal totalEntradas = 0;

                // Escribir filas de entradas
                foreach (var entrada in listentrada_DTO2)
                {
                    // Verifica si es la primera vez que estás añadiendo la fila de la entrada (para fecha)
                    bool esPrimeraEntrada = true;

                    foreach (var detalle in entrada.entradaDetalle_DTO)
                    {
                        // Solo agregar fecha en la primera iteración de los detalles de la entrada
                        if (esPrimeraEntrada)
                        {
                            table.AddCell(new Cell().Add(new Paragraph(entrada.Fecha.ToString("dd/MM/yyyy")))
                                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                                .SetPadding(10));
                            esPrimeraEntrada = false;
                        }
                        else
                        {
                            // Si no es la primera entrada, agregar celda vacía para la fecha
                            table.AddCell(new Cell().Add(new Paragraph("")).SetPadding(10));
                        }

                        Producto_DTO producto = productos.FirstOrDefault(p => p.Id == detalle.IdProducto);
                        string nombreProducto = producto?.Nombre ?? "Producto no encontrado";

                        // Añadir los detalles de la entrada (Producto, Cantidad, Precio, Sub Monto Total)
                        table.AddCell(new Cell().Add(new Paragraph(nombreProducto))
                            .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                            .SetPadding(10));
                        table.AddCell(new Cell().Add(new Paragraph(detalle.Cantidad.ToString()))
                            .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                            .SetPadding(10));
                        table.AddCell(new Cell().Add(new Paragraph($"RD$ {detalle.Costo.ToString("N2")}")
                            .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                            .SetPadding(10)));
                        table.AddCell(new Cell().Add(new Paragraph($"RD$ {detalle.SubMontoTotal?.ToString("N2") ?? "N/A"}")
                            .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                            .SetPadding(10)));

                        // Sumar el SubMontoTotal al total de las entradas
                        totalEntradas += detalle.SubMontoTotal ?? 0;
                    }
                }

                doc.Add(table);

                Paragraph total = new Paragraph($"Total General: RD$ {totalEntradas.ToString("N2")}")
                    .SetTextAlignment(iText.Layout.Properties.TextAlignment.RIGHT)
                    .SetFontSize(14)
                    .SetBold()
                    .SetFontColor(new DeviceRgb(0, 123, 255))
                    .SetMarginBottom(20);
                doc.Add(total);

                // Pie de página
                Paragraph piePagina = new Paragraph()
                    .Add(new Text($"{empresaNombre} | Todos los derechos reservados").SetFontSize(8).SetFontColor(new DeviceRgb(169, 169, 169)))
                    .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                    .SetFixedPosition(0, 30, PageSize.A4.GetWidth())
                    .SetMarginTop(10);
                doc.Add(piePagina);

                doc.Close();
                writer.Close();

                byte[] buffer = ms.ToArray();
                string base64 = Convert.ToBase64String(buffer);
                string pdf = "data:application/pdf;base64," + base64;

                jsruntime.InvokeVoidAsync("descargarEntradas", pdf);
            }
        }
    }


    // Método para eliminar una entrada
    private void EliminarEntrada()
    {
       
    }

    // Clase modelo para una entrada
    private class Entradass
    {
        public DateTime Fecha { get; set; } = DateTime.Today;
        public string NombreProveedor { get; set; } = string.Empty;
        public string NombreProducto { get; set; } = string.Empty;
        public decimal Precio { get; set; } // Añadido para el precio
        public int Stock { get; set; } // Añadido para el stock
    }
}
