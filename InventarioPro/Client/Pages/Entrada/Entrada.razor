@page "/Entrada"
@using CurrieTechnologies.Razor.SweetAlert2
@using InventarioPro.Shared.DTOS.Entrada
@using InventarioPro.Shared.DTOS.Producto
@inject SweetAlertService swal
@using Radzen
@inject HttpClient Http
@inject Radzen.DialogService DialogService



<EditForm Model="@entrada_DTO" OnValidSubmit="HandleValidSubmit">
    <div class="modal show d-block pad" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content p-3">
                <div class="modal-header">
                    <h5 class="modal-title">Nueva Entrada</h5>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Click=" Cancel" />
                </div>
                <div class="modal-body">
                    <div class="form-group mb-3">
                        <label>Fecha</label>
                        <RadzenDatePicker TValue="DateTime" @bind-Value="entrada_DTO.Fecha" Style="width: 100%;" />
                    </div>

                    <div class="row mb-3">
                        <div class="col-md-3 col-sm-6">
                            <label>Producto</label>
                            <RadzenDropDown Placeholder="Entrada" TextProperty="Nombre" ValueProperty="Id"
                                Data="@listproducto_DTO" @bind-Value="entradaDetalle_DTO.IdProducto"
                                Class="form-control" />
                        </div>
                        <div class="col-md-3 col-sm-6">
                            <label>Cantidad</label>
                            <RadzenNumeric TValue="int" Placeholder="Cantidad" @bind-Value="entradaDetalle_DTO.Cantidad"
                                Class="form-control" />
                        </div>
                        <div class="col-md-3 col-sm-6">
                            <label>Precio</label>
                            <RadzenNumeric TValue="decimal" Placeholder="Precio" @bind-Value="entradaDetalle_DTO.Precio"
                                Class="form-control" />
                        </div>
                    </div>
                    <div class="d-flex justify-content-end mb-3">
                        <RadzenButton Text="Agregar" ButtonStyle="ButtonStyle.Primary" Click="AgregarEntrada" />
                    </div>

                    <!-- Tabla para mostrar las entradas agregadas con datos ficticios -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover"
                            style="width: 100%; border-collapse: separate; border-spacing: 0 10px;">
                            <thead class="table-dark">
                                <tr>
                                    <th scope="col">Producto</th>
                                    <th scope="col">Cantidad</th>
                                    <th scope="col">Precio</th>
                                    <th scope="col">Acciones</th> <!-- Nueva columna para las acciones -->
                                </tr>
                            </thead>
                            <tbody>
                                <!-- Itera sobre la lista de entradas, asumiendo que se llama listentradaDetalle_DTO -->
                                @foreach (var item in listentradaDetalle_DTO)
                                {
                                    var producto = listproducto_DTO.FirstOrDefault(p => p.Id == item.IdProducto);

                                    <tr style="height: 40px;">
                                        <td>@producto.Nombre</td>
                                        <td>@item.Cantidad</td>
                                        <td>@item.Precio.ToString("C")</td> <!-- Formato de moneda -->
                                        <td>
                                            <!-- BotÃ³n de eliminar en rojo -->
                                            <button type="button" @onclick="() => EliminarEntrada(item.IdProducto)"
                                                class="btn btn-danger btn-sm">Eliminar</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>


                    @* <RadzenDataGrid Data="@listentradaDetalle_DTO" TItem="EntradaDetalle_DTO" RowHeight="40"
                    Style="width: 100%;">
                    <Columns>
                    <RadzenDataGridColumn TItem="EntradaDetalle_DTO" Property="IdProducto" Title="Producto" />
                    <RadzenDataGridColumn TItem="EntradaDetalle_DTO" Property="Cantidad" Title="Cantidad" />
                    <RadzenDataGridColumn TItem="EntradaDetalle_DTO" Property="Precio" Title="Precio" />
                    </Columns>
                    </RadzenDataGrid> *@

                    <div class="d-flex justify-content-end mt-2">
                        <h5>Total: @total</h5>
                    </div>
                </div>
                <div class="d-flex justify-content-center gap-2 mt-4 mb-2">
                    <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Secondary" Click=" Cancel" />
                    <RadzenButton Text="Guardar" ButtonStyle="ButtonStyle.Primary" Click="HandleValidSubmit" />
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public Entrada_DTO entrada_DTO { get; set; } = new Entrada_DTO();
    public Producto_DTO producto_DTO { get; set; } = new Producto_DTO();
    public EntradaDetalle_DTO entradaDetalle_DTO { get; set; } = new EntradaDetalle_DTO();
    private DateTime fecha = DateTime.Now;
    private decimal total;
    private List<Producto_DTO> listproducto_DTO = new List<Producto_DTO>();
    private List<EntradaDetalle_DTO> listentradaDetalle_DTO = new List<EntradaDetalle_DTO>();

    protected override async Task OnInitializedAsync()
    {
        var response = await Http.GetAsync($"api/producto/getproductos");
        listproducto_DTO = await response.Content.ReadFromJsonAsync<List<Producto_DTO>>();

    }

    private async Task HandleValidSubmit()
    {
        entrada_DTO.MontoTotal = total;
        entrada_DTO.entradaDetalle_DTO = listentradaDetalle_DTO;
        var response = await Http.PostAsJsonAsync("api/entrada", entrada_DTO);






        var response2 = Http.PutAsJsonAsync("api/entrada/modificarproducto", listentradaDetalle_DTO);




        if (response.IsSuccessStatusCode)
        {
            entrada_DTO = new Entrada_DTO();
            listentradaDetalle_DTO = new List<EntradaDetalle_DTO>();
            total = 0;
        }

    }

    private void AgregarEntrada()
    {
        var item = listentradaDetalle_DTO.FirstOrDefault(p => p.IdProducto == entradaDetalle_DTO.IdProducto);
        if (item == null)
        {
            listentradaDetalle_DTO.Add(entradaDetalle_DTO);

            total += entradaDetalle_DTO.Precio;
            entradaDetalle_DTO = new EntradaDetalle_DTO();

            StateHasChanged();
        }

    }
    private void EliminarEntrada(int id)
    {
        var item = listentradaDetalle_DTO.FirstOrDefault(p => p.IdProducto == entrada_DTO.Id);
        if (item != null)
        {
            total -= item.Precio;
        }

        listentradaDetalle_DTO = listentradaDetalle_DTO.Where(p => p.IdProducto != id).ToList();
        StateHasChanged();

    }
    private void Cancel()
    {
        DialogService.Close(null);
    }
}
