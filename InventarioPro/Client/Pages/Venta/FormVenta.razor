@using InventarioPro.Shared.DTOS.Empresa
@using InventarioPro.Shared.DTOS.Producto
@using InventarioPro.Shared.DTOS.Venta
@using System.Globalization
@using Radzen
@using iText.IO.Image
@using iText.Kernel.Geom
@using iText.Kernel.Pdf
@using iText.Layout
@using iText.Layout.Borders
@using iText.Layout.Element
@using iText.Layout.Properties
@inject HttpClient Http
@inject Radzen.DialogService DialogService
@inject SweetAlertService swal
@inject IJSRuntime jsruntime;

<EditForm Model="@venta" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="modal show d-block" style="background-color: rgba(0, 0, 0, 0.5);">
        <div class="modal-dialog modal-lg">
            <div class="modal-content">
                <!-- Modal Header -->
                <div class="modal-header bg-primary text-white">
                    <h5 class="modal-title">Nueva Venta</h5>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Click="Cancel" />
                </div>

                <!-- Modal Body -->
                <div class="modal-body">
                    <!-- Fecha -->
                    <div class="form-group mb-3">
                        <label class="form-label">Fecha</label>
                        <RadzenDatePicker @bind-Value="venta.Fecha" DateFormat="dd/MM/yyyy" Placeholder="Fecha"
                                          Style="width: 100%;" />
                        <ValidationMessage For="@( () => venta.Fecha)" class="text-danger" />
                    </div>

                    <!-- Nombre del Cliente -->
                    <div class="form-group mb-3">
                        <label class="form-label">Nombre del Cliente</label>
                        <RadzenTextBox @bind-Value="venta.Nombre" Placeholder="Nombre del Cliente" Style="width: 100%;" />
                        <ValidationMessage For="@( () => venta.Nombre)" class="text-danger" />
                    </div>

                    <!-- Cédula del Cliente -->
                    <div class="form-group mb-3">
                        <label class="form-label">Cédula del Cliente</label>
                        <RadzenTextBox @bind-Value="venta.Cedula" Placeholder="Cédula del Cliente" Style="width: 100%;" />
                        <ValidationMessage For="@( () => venta.Cedula)" class="text-danger" />
                    </div>

                    <!-- Detalles de la Venta -->
                    <h5 class="badge bg-success">DETALLES DE LA VENTA:</h5>

                    <div class="row g-3 align-items-end mb-3">
                        <div class="col-md-3 col-sm-6">
                            <label class="form-label">Presentación de Producto</label>
                            <RadzenDropDownDataGrid Placeholder="Presentación"
                                                    TextProperty="Nombre"
                                                    ValueProperty="Id"
                                                    Data="@presentaciones"
                                                    @bind-Value="nuevoDetalle.IdPresentacion"
                                                    Class="form-select"
                                                    Style="width: 100%;"
                                                    Filterable="true"
                                                    AllowClear="true"
                                                    AriaLabel="Buscar presentación"
                                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                                    Change="OnPresentacionChange" />
                        </div>

                        <div class="col-md-3 col-sm-6">
                            <label class="form-label">Cantidad</label>
                            <RadzenNumeric @bind-Value="nuevoDetalle.Cantidad"
                                           Placeholder="Cantidad"
                                           Class="form-control"
                                           Min="1" />
                        </div>

                        <div class="col-md-3 col-sm-6">
                            <label class="form-label">Precio</label>
                            <RadzenNumeric @bind-Value="nuevoDetalle.Precio"
                                           Placeholder="Precio"
                                           Class="form-control"
                                           Decimal="true"
                                           Min="0" />
                        </div>

                        <div class="col-md-3 col-sm-6">
                            <button class="btn btn-secondary w-100" type="button" @onclick="AddDetalle">Agregar</button>
                        </div>
                    </div>

                    <!-- Tabla de Detalles -->
                    <div class="table-responsive">
                        <table class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th scope="col">Presentación</th>
                                    <th scope="col">Cantidad</th>
                                    <th scope="col">Precio</th>
                                    <th scope="col">Subtotal</th>
                                    <th scope="col">Acciones</th>
                                </tr>
                            </thead>

                            <tbody>
                                @foreach (var item in detalles)
                                {
                                    var presentacion = presentaciones.FirstOrDefault(p => p.Id == item.IdPresentacion);

                                    <tr>
                                        <td>@presentacion?.Nombre</td>
                                        <td>@item.Cantidad</td>
                                        <td>@item.Precio.ToString("C")</td>
                                        <td>@(item.Cantidad * item.Precio)</td>
                                        <td>
                                            <button type="button" @onclick="() => RemoveDetalle(item.IdPresentacion)" class="btn btn-danger btn-sm">
                                                Eliminar
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>

                    <!-- Total -->
                    <div class="d-flex justify-content-end mt-2">
                        <h5>Total: @MontoTotal.ToString("C")</h5>
                    </div>
                </div>

                <!-- Modal Footer -->
                <div class="modal-footer d-flex justify-content-between">
                    <button class="btn"
                            style="background-color: @(estado ? "green" : "red"); color: white;"
                            type="button"
                            @onclick="AgregarPantalla">
                        Agregar Pantalla
                    </button>
                    <div class="d-flex gap-2">
                        <RadzenButton Text="Cancelar" ButtonStyle="ButtonStyle.Secondary" Click="Cancel" />
                        <RadzenButton Text="Guardar Venta" ButtonType="Radzen.ButtonType.Submit" ButtonStyle="ButtonStyle.Primary" />
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>


@code {
    [Parameter]
    public Venta_DTO venta { get; set; } = new Venta_DTO();
    private List<VentaDetalle_DTO> detalles = new List<VentaDetalle_DTO>();
    private VentaDetalle_DTO nuevoDetalle = new VentaDetalle_DTO();
    private List<Presentacion_DTO> presentaciones = new List<Presentacion_DTO>();
    private Empresa_DTO empresa;
    private List<Producto_DTO> productos { get; set; } = new List<Producto_DTO>();
    private VentaTemporal ventaTemporal = new VentaTemporal();
    private List<VentaDetalletemporal> ventaDetalletemporal = new List<VentaDetalletemporal>();
    private bool estado { get; set; }
    private decimal MontoTotal => CalcularMontoTotal();

    protected override async Task OnInitializedAsync()
    {
        await LoadPresentaciones();
        productos = await Http.GetFromJsonAsync<List<Producto_DTO>>("api/producto/GetProductos");
        if (venta.Id > 0) // Si se está editando una venta existente
        {
            await LoadVentaDetalles(venta.Id);
        }
        empresa = await Http.GetFromJsonAsync<Empresa_DTO>("api/empresa/1");
    }
    public void AgregarPantalla()
    {
        ventaTemporal.Id = venta.Id;
        ventaTemporal.Fecha = venta.Fecha;
        ventaTemporal.MontoTotal = venta.MontoTotal;
        ventaTemporal.Nombre = venta.Nombre;
        ventaTemporal.Cedula = venta.Cedula;
        ventaTemporal.FechaCreacion = venta.FechaCreacion;
        ventaTemporal.FechaActualizacion = venta.FechaActualizacion;
        ventaTemporal.Eliminado = venta.Eliminado;
        ventaDetalletemporal = detalles
       .Select(d => new VentaDetalletemporal
           {
               Id = d.Id,
               IdPresentacion = d.IdPresentacion,
               Cantidad = d.Cantidad,
               Precio = d.Precio,
               Eliminado = d.Eliminado,
               FechaCreacion = d.FechaCreacion,
               FechaActualizacion = d.FechaActualizacion
           }).ToList();

        venta = new Venta_DTO();
        detalles = new List<VentaDetalle_DTO>();
        estado = true;

       

    }
    private async Task LoadPresentaciones()
    {
        try
        {
            var response = await Http.GetAsync("api/producto/GetPresentaciones");
            if (response.IsSuccessStatusCode)
            {
                presentaciones = await response.Content.ReadFromJsonAsync<List<Presentacion_DTO>>();

                // Fetch products for each presentation
                foreach (var presentacion in presentaciones)
                {
                    if (presentacion.ProductoId > 0)
                    {
                        await ObtenerPresentacion(presentacion.ProductoId);
                    }
                }
            }
            else
            {
                await swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "No se pudieron cargar las presentaciones.",
                        Icon = SweetAlertIcon.Error
                    });
            }
        }
        catch (Exception ex)
        {
            await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Error al cargar presentaciones: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private async Task ObtenerPresentacion(int productoId)
    {
        var response = await Http.GetAsync($"api/producto/GetPresentacionById/{productoId}");
        if (response.IsSuccessStatusCode)
        {
            var presentacion = await response.Content.ReadFromJsonAsync<Presentacion_DTO>();
            // Retrieve associated product
            var productoResponse = await Http.GetAsync($"api/producto/GetPorId/{presentacion.ProductoId}");
            if (productoResponse.IsSuccessStatusCode)
            {
                var producto = await productoResponse.Content.ReadFromJsonAsync<Producto_DTO>();
                // Store product details in Presentacion
                presentacion.Producto = producto;
            }
        }
    }


    private async void AddDetalle()
    {
        try
        {
            // Verificar si se seleccionó una presentación válida
            var presentacionSeleccionada = presentaciones.FirstOrDefault(p => p.Id == nuevoDetalle.IdPresentacion);

            if (presentacionSeleccionada == null || presentacionSeleccionada.Producto == null)
            {
                await swal.FireAsync(new SweetAlertOptions
                    {
                        Title = "Error",
                        Text = "Debe seleccionar una presentación válida con un producto asociado.",
                        Icon = SweetAlertIcon.Error
                    });
                return;
            }

            var detalleVenta = new VentaDetalle_DTO
                {
                    IdPresentacion = nuevoDetalle.IdPresentacion,
                    Cantidad = nuevoDetalle.Cantidad,
                    Precio = nuevoDetalle.Precio
                };

            detalles.Add(detalleVenta);

            nuevoDetalle = new VentaDetalle_DTO();

        }
        catch (Exception ex)
        {
            await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = $"Hubo un error al agregar el detalle: {ex.Message}",
                    Icon = SweetAlertIcon.Error
                });
        }
    }

    private async Task HandleValidSubmit()
    {
        venta.MontoTotal = MontoTotal;

        venta.VentaDetalle_DTOs = detalles;


        var response = await Http.PostAsJsonAsync("api/venta/Guardar", venta);

        if (response.IsSuccessStatusCode)
        {
            await ShowAlert("Éxito", (venta.Id == 0) ? "Venta Creada Con Exito!" : "Venta Actualizada Con Exito", SweetAlertIcon.Success);

            var result = await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "¿Desea imprimir la factura?",
                    Text = "¿Quiere generar el PDF de la factura ahora?",
                    Icon = SweetAlertIcon.Question,
                    ShowCancelButton = true,
                    ConfirmButtonText = "Sí",
                    CancelButtonText = "No"
                });

            if (result.IsConfirmed)
            {
                await ExportarFacturaComercialPDF();
            }

            //DialogService.Close(true);
            if (!string.IsNullOrEmpty(ventaTemporal.Nombre))
            {
                detalles = new List<VentaDetalle_DTO>();

                venta.Id = ventaTemporal.Id;
                venta.Fecha = ventaTemporal.Fecha;
                venta.MontoTotal = 10; // Asignar el nuevo valor para MontoTotal
                venta.Nombre = ventaTemporal.Nombre;
                venta.Cedula = ventaTemporal.Cedula;
                venta.FechaCreacion = ventaTemporal.FechaCreacion;
                venta.FechaActualizacion = ventaTemporal.FechaActualizacion;
                venta.Eliminado = false; // Se asume que al guardar, no está eliminado
                detalles = ventaDetalletemporal.Select(v => new VentaDetalle_DTO
{
                Id = v.Id,
                IdPresentacion = v.IdPresentacion,
                Cantidad = v.Cantidad,
                Precio = 10,
                Eliminado = false,
                FechaCreacion = v.FechaCreacion,
                FechaActualizacion = v.FechaActualizacion
               }).ToList();

           
            }
 
        }
        else
        {
            await ShowAlert("Error", "Ocurrió un error al guardar la venta", SweetAlertIcon.Error);
        }
    }

    private async Task ShowAlert(string title, string message, SweetAlertIcon icon)
    {
        await swal.FireAsync(new SweetAlertOptions
            {
                Title = title,
                Text = message,
                Icon = icon,
                ConfirmButtonText = "OK"
            });
    }
    private async Task LoadVentaDetalles(int ventaId)
    {
        var response = await Http.GetAsync($"api/venta/GetVentaById/{ventaId}");

        if (response.IsSuccessStatusCode)
        {
            var ventaDetails = await response.Content.ReadFromJsonAsync<Venta_DTO>();

            detalles = ventaDetails.VentaDetalle_DTOs;

            venta.Nombre = ventaDetails.Nombre;
            venta.Cedula = ventaDetails.Cedula;
            venta.Fecha = ventaDetails.Fecha;
            venta.MontoTotal = ventaDetails.MontoTotal;

            StateHasChanged();
        }
        else
        {
            await swal.FireAsync(new SweetAlertOptions
                {
                    Title = "Error",
                    Text = "No se pudo cargar los detalles de la venta.",
                    Icon = SweetAlertIcon.Error,
                    ConfirmButtonText = "OK"
                });
        }
    }

   

    private void RemoveDetalle(int id)
    {
        detalles = detalles.Where(p => p.IdPresentacion != id).ToList();
        StateHasChanged();
    }

    private decimal CalcularMontoTotal()
    {
        return detalles.Sum(d => d.Cantidad * d.Precio);
    }

    private async void OnPresentacionChange(object value)
    {
        var presentacion = presentaciones.FirstOrDefault(p => p.Id == (int)value);
        if (presentacion != null)
        {
            nuevoDetalle.Precio = (decimal)presentacion.Precio;
        }
    }
    public async Task ExportarFacturaComercialPDF()
    {
        if (venta == null)
        {
            Console.WriteLine("No hay venta para exportar.");
            return;
        }

        string empresaNombre = empresa.Nombre;
        string empresaRNC = empresa.RNC;
        string empresaDireccion = empresa.Direccion;
        string empresaTelefono = empresa.Telefono;
        string ncf = "B00001234"; // Número de comprobante fiscal

        var cultura = new CultureInfo("es-DO");

        using (MemoryStream ms = new MemoryStream())
        {
            PdfWriter writer = new PdfWriter(ms);

            // Definir tamaño de página para impresora térmica con altura más limitada
            var pageSize = new PageSize(164.57f, 400f); // Reducir altura significativamente
            using (var pdfDoc = new PdfDocument(writer))
            {
                Document doc = new Document(pdfDoc, pageSize);
                doc.SetMargins(5, 5, 5, 5); // Márgenes compactos

                pdfDoc.GetCatalog().SetPageMode(PdfName.UseNone);

                // Encabezado de la empresa
                Paragraph encabezadoEmpresa = new Paragraph()
                    .Add(new Text("FACTURA COMERCIAL").SetFontSize(10).SetBold())
                    .Add(new Text($"\n{empresaNombre}").SetFontSize(10))
                    .Add(new Text($"\nRNC: {empresaRNC}").SetFontSize(8))
                    .Add(new Text($"\nDir: {empresaDireccion}").SetFontSize(8))
                    .Add(new Text($"\nTel: {empresaTelefono}").SetFontSize(8))
                    .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                    .SetMarginBottom(10);
                doc.Add(encabezadoEmpresa);

                // Información de la factura (con fecha y hora)
                string fechaHora = DateTime.Now.ToString("dd/MM/yyyy HH:mm:ss", cultura);
                Paragraph datosFactura = new Paragraph()
                    .Add(new Text($"Fecha: {fechaHora}").SetFontSize(8))
                    .Add(new Text($"\nNCF: {ncf}").SetFontSize(8))
                    .SetTextAlignment(iText.Layout.Properties.TextAlignment.LEFT)
                    .SetMarginBottom(10);
                doc.Add(datosFactura);

                // Crear la tabla para los detalles de los productos
                Table table = new Table(UnitValue.CreatePercentArray(new float[] { 0.6f, 0.2f, 0.2f })).UseAllAvailableWidth();
                table.AddHeaderCell(new Cell().Add(new Paragraph("DESCRIPCIÓN").SetFontSize(8).SetBold()).SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER));
                table.AddHeaderCell(new Cell().Add(new Paragraph("UND").SetFontSize(8).SetBold()).SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER));
                table.AddHeaderCell(new Cell().Add(new Paragraph("PRECIO").SetFontSize(8).SetBold()).SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER));

                // Agregar los productos a la tabla
                foreach (var detalle in venta.VentaDetalle_DTOs)
                {
                    var producto = presentaciones.FirstOrDefault(p => p.Id == detalle.IdPresentacion);
                    var nombreProducto = producto != null ? producto.Nombre : "Producto desconocido";
                    table.AddCell(new Cell().Add(new Paragraph(nombreProducto).SetFontSize(8)).SetTextAlignment(iText.Layout.Properties.TextAlignment.LEFT));
                    table.AddCell(new Cell().Add(new Paragraph(detalle.Cantidad.ToString()).SetFontSize(8)).SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER));
                    table.AddCell(new Cell().Add(new Paragraph(detalle.Precio.ToString("₱ #,##0.00")).SetFontSize(8)).SetTextAlignment(iText.Layout.Properties.TextAlignment.RIGHT));
                }

                doc.Add(table);

                // Calcular totales
                decimal subtotal = venta.MontoTotal;
                decimal itbis = subtotal * 0.18m; // 18% ITBIS
                decimal total = subtotal + itbis;

                // Mostrar los totales
                Paragraph totales = new Paragraph()
                    .Add(new Text($"\nSUBTOTAL: ₱ {subtotal:F2}").SetFontSize(8))
                    .Add(new Text($"\nITBIS (18%): ₱ {itbis:F2}").SetFontSize(8))
                    .Add(new Text($"\nTOTAL: ₱ {total:F2}").SetFontSize(10).SetBold())
                    .SetTextAlignment(iText.Layout.Properties.TextAlignment.RIGHT)
                    .SetMarginTop(10);
                doc.Add(totales);

                // Nota de agradecimiento (hasta www.miempresa.com.do)
                Paragraph nota = new Paragraph()
                    .Add(new Text("\n¡GRACIAS POR SU COMPRA!").SetFontSize(8))
                    .Add(new Text("\nwww.miempresa.com.do").SetFontSize(8))
                    .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                    .SetMarginTop(10);
                doc.Add(nota);

                doc.Close();
            }

            // Convertir a PDF base64
            byte[] buffer = ms.ToArray();
            string base64 = Convert.ToBase64String(buffer);
            string pdf = "data:application/pdf;base64," + base64;

            await jsruntime.InvokeVoidAsync("descargarFactura", pdf);
        }
    }



    private void Cancel()
    {
        DialogService.Close(false);
    }
    // The rest of the methods remain largely the same as in the original code
    // (LoadVentaDetalles, HandleValidSubmit, Cancel, etc.)

    public class VentaTemporal
    {
        public int Id { get; set; }
        public DateTime Fecha { get; set; }
        public decimal? MontoTotal { get; set; }
        public string? Nombre { get; set; }
        public string? Cedula { get; set; }
        public bool? Eliminado { get; set; }
        public DateTime FechaCreacion { get; set; }
        public DateTime FechaActualizacion { get; set; }
        public virtual ICollection<VentaDetalletemporal> ventaDetalle { get; set; } = new List<VentaDetalletemporal>();

    }
    public class VentaDetalletemporal
    {
        public int Id { get; set; }
        public int IdPresentacion { get; set; }
        public int Cantidad { get; set; } = 0;
        public decimal? Precio { get; set; }
        public bool? Eliminado { get; set; }
        public DateTime FechaCreacion { get; set; }
        public DateTime FechaActualizacion { get; set; }


    }
}