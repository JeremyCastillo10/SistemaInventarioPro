@page "/ListVentas"
@using InventarioPro.Shared.DTOS.Venta
@using OfficeOpenXml
@using iText.Kernel.Geom
@using iText.Layout.Borders
@using iText.Layout.Element
@using iText.Pdfa;
@using iText.Kernel.Pdf;
@using iText.Layout;
@inject IJSRuntime jsruntime;
@inject HttpClient Http
@inject Radzen.DialogService DialogService

<PageTitle>Inventario de Ventas</PageTitle>

<div class="header">
    <h2>Inventario de Ventas</h2>
    <RadzenButton Text="Agregar Venta" Click="OpenAddVentaDialog" Style="margin-bottom: 10px;" />
</div>

<div class="filters" style="display: flex; flex-wrap: wrap; margin-bottom: 20px;">
    <div style="display: flex; align-items: center; flex-wrap: wrap; width: 100%; margin-bottom: 10px;">
        <label style="margin-right: 5px;">Fecha Inicio:</label>
        <RadzenDatePicker @bind-Value="value1" DateFormat="dd/MM/yyyy" Style="margin-right: 10px; flex: 1 1 150px;" />
        <label style="margin-right: 5px;">Fecha Fin:</label>
        <RadzenDatePicker @bind-Value="value2" DateFormat="dd/MM/yyyy" Style="margin-right: 10px; flex: 1 1 150px;" />
        <RadzenTextBox @bind-Value="searchTerm" Placeholder="Buscar Cliente" Style="flex: 2; min-width: 150px; margin-right: 10px;" />
        <RadzenButton Text="Filtrar" Click="FilterVentas" Style="margin-right: 10px;" />
    </div>
    <div style="display: flex; align-items: center; width: 100%;">
        <RadzenButton Text="Exportar a Excel" Click="exportarVentasExcel" />
        <RadzenButton Text="Exportar a PDF" Click="exportarVentasPDF" />
    </div>
</div>

<div style="max-height: 450px; overflow-y: auto;">
    @if (isLoading)
    {
        <div style="text-align: center; padding: 20px; font-size: 18px; font-style: italic; color: gray;">
            Cargando ventas...
        </div>
    }
    else
    {
        <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowSorting="true" PageSize="8" AllowPaging="true"
                        Data="@filteredVentas" ColumnWidth="300px" ShowPagingSummary="true" @bind-Value="@selectedVentas">
            <Columns>
                <RadzenDataGridColumn Property="@nameof(Venta_DTO.Fecha)" Title="Fecha" FormatString="{0:dd/MM/yyyy}" />
                <RadzenDataGridColumn Property="@nameof(Venta_DTO.MontoTotal)" Title="Monto Total" FormatString="{0:C}" />
                <RadzenDataGridColumn Property="@nameof(Venta_DTO.Nombre)" Title="Cliente" />
                <RadzenDataGridColumn Title="Acciones">
                    <Template Context="data">
                        <RadzenButton Text="Detalles" Click="() => OpenDetailDialog(data.Id)" />
                    </Template>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

        @if (!filteredVentas.Any())
        {
            <div style="text-align: center; padding: 10px; font-style: italic; color: gray;">
                No hay ventas disponibles para mostrar.
            </div>
        }
    }
</div>

@code {
    private List<Venta_DTO> ventas = new List<Venta_DTO>();
    private List<Venta_DTO> filteredVentas = new List<Venta_DTO>();
    private IList<Venta_DTO> selectedVentas;
    private DateTime? value1 { get; set; } = DateTime.Today;
    private DateTime? value2 { get; set; } = DateTime.Today;
    private string searchTerm;
    private bool isLoading = true; // Variable para indicar que los datos están cargando

    protected override async Task OnInitializedAsync()
    {
        await LoadVentas();
        filteredVentas = ventas;  // Start with all the products
        isLoading = false;  // Se setea a false cuando se hayan cargado los datos
    }

    private async Task LoadVentas()
    {
        try
        {
            ventas = await Http.GetFromJsonAsync<List<Venta_DTO>>("api/venta/GetVentas");
            filteredVentas = ventas;
        }
        catch (HttpRequestException ex)
        {
            filteredVentas = new List<Venta_DTO>();
            Console.WriteLine("Error al cargar las ventas: " + ex.Message);
        }
    }

    private async Task FilterVentas()
    {
        try
        {
            // Retrieve all ventas first
            var allVentas = await Http.GetFromJsonAsync<List<Venta_DTO>>("api/venta/GetVentas");

            // Filter by dates if applicable
            if (value1.HasValue && value2.HasValue)
            {
                allVentas = allVentas.Where(v => v.Fecha >= value1.Value && v.Fecha <= value2.Value).ToList();
            }

            // Search by client name if there is a search term
            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                allVentas = allVentas.Where(v => v.Nombre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
            }

            filteredVentas = allVentas; // Update the filtered list
        }
        catch (HttpRequestException ex)
        {
            filteredVentas = new List<Venta_DTO>();
        }
    }

    private async Task OpenAddVentaDialog()
    {
        var newVenta = new Venta_DTO();
        var options = new Radzen.DialogOptions { Style = "width: 700px;" };
        var result = await DialogService.OpenAsync<FormVenta>("Agregar Nueva Venta", new Dictionary<string, object> { { "venta", newVenta } }, options);

        if (result != null)
        {
            await LoadVentas(); // Refresh the list
        }
    }

    private async Task OpenDetailDialog(int ventaId)
    {
        var response = await Http.GetAsync($"api/venta/GetVentaById/{ventaId}");

        if (response.IsSuccessStatusCode)
        {
            var ventaDetails = await response.Content.ReadFromJsonAsync<Venta_DTO>();
            var options = new Radzen.DialogOptions { Style = "width: 900px;" };
            await DialogService.OpenAsync<FormVenta>("Detalles de la Venta", new Dictionary<string, object> { { "venta", ventaDetails } }, options);
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
        }
    }

    public void exportarVentasExcel()
    {
        // Verifica si hay ventas para exportar
        if (ventas == null || !ventas.Any())
        {
            Console.WriteLine("No hay ventas para exportar.");
            return;
        }

        string[] cabecerasTabla = { "Fecha", "Monto Total", "Cliente", "Cédula", "Detalles" };
        string[] propiedadesMostrar = { "Fecha", "MontoTotal", "Nombre", "Cedula" };

        using (MemoryStream ms = new MemoryStream())
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

            using (ExcelPackage ep = new ExcelPackage())
            {
                var worksheet = ep.Workbook.Worksheets.Add("Ventas");

                // Añadir cabeceras
                for (int i = 0; i < cabecerasTabla.Length; i++)
                {
                    worksheet.Column(i + 1).Width = 20;
                    worksheet.Cells[1, i + 1].Value = cabecerasTabla[i];
                }

                // Inicializar valores
                int fila = 2;
                foreach (var venta in ventas)
                {
                    int col = 1;

                    // Rellenar las propiedades de la venta
                    foreach (string propiedad in propiedadesMostrar)
                    {
                        worksheet.Cells[fila, col].Value = venta.GetType().GetProperty(propiedad)?.GetValue(venta)?.ToString() ?? "N/A";
                        col++;
                    }

                    // Agregar detalles de la venta
                    var detalles = venta.VentaDetalle_DTOs.Select(d => $"{d.IdProducto} x {d.Cantidad} a {d.Precio:C}").ToArray();
                    worksheet.Cells[fila, col].Value = string.Join(", ", detalles);

                    fila++;
                }

                ep.SaveAs(ms);
                byte[] buffer = ms.ToArray();
                string base64 = Convert.ToBase64String(buffer);
                string excel = "data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64," + base64;
                jsruntime.InvokeVoidAsync("descargarExcel", excel);
            }
        }
    }
    public void exportarVentasPDF()
{
    if (ventas == null || !ventas.Any())
    {
        Console.WriteLine("No hay ventas para exportar.");
        return;
    }

    // Datos ficticios de la empresa
    string empresaNombre = "Tech Solutions S.A.";
    string empresaDireccion = "Av. de la Tecnología 123, Ciudad Innovadora";
    string empresaTelefono = "+123 456 7890";
    string empresaEmail = "contacto@techsolutions.com";

    string[] cabecerasTabla = { "Fecha", "Monto Total", "Cliente", "Cédula", "Detalles" };
    string[] propiedadesMostrar = { "Fecha", "MontoTotal", "Nombre", "Cedula" };

    using (MemoryStream ms = new MemoryStream())
    {
        PdfWriter writer = new PdfWriter(ms);
        using (var pdfDoc = new PdfDocument(writer))
        {
            // Crea el documento PDF
            Document doc = new Document(pdfDoc, PageSize.A4);
            doc.SetMargins(30, 30, 40, 30); // márgenes más amplios para mayor elegancia

            // Encabezado de la empresa con un estilo limpio
            Paragraph empresaInfo = new Paragraph()
                .Add(new Text(empresaNombre).SetBold().SetFontSize(16).SetFontColor(iText.Kernel.Colors.ColorConstants.BLACK))
                .Add(new Text("\n" + empresaDireccion).SetFontSize(10).SetFontColor(iText.Kernel.Colors.ColorConstants.GRAY))
                .Add(new Text("\nTeléfono: " + empresaTelefono).SetFontSize(10).SetFontColor(iText.Kernel.Colors.ColorConstants.GRAY))
                .Add(new Text("\nEmail: " + empresaEmail).SetFontSize(10).SetFontColor(iText.Kernel.Colors.ColorConstants.GRAY))
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.LEFT)
                .SetMarginBottom(20);
            doc.Add(empresaInfo);

            // Título del documento con mayor énfasis
            Paragraph p1 = new Paragraph("Reporte de Ventas")
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                .SetFontSize(20)
                .SetBold()
                .SetFontColor(iText.Kernel.Colors.ColorConstants.BLUE)
                .SetMarginBottom(10);
            doc.Add(p1);

            // Subtítulo con la fecha actual de la exportación (solo fecha, sin hora)
            Paragraph fechaExportacion = new Paragraph("Fecha de Exportación: " + DateTime.Now.ToString("dd/MM/yyyy"))
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.RIGHT)
                .SetFontSize(12)
                .SetFontColor(iText.Kernel.Colors.ColorConstants.GRAY)
                .SetMarginBottom(20);
            doc.Add(fechaExportacion);

            // Crear la tabla con bordes visibles
            Table table = new Table(cabecerasTabla.Length, true);
            table.SetWidthPercent(100);
            table.SetMarginBottom(30); // mayor espacio después de la tabla

            // Estilo de cabecera de la tabla (con fondo gris claro y bordes)
            foreach (var cabecera in cabecerasTabla)
            {
                var headerCell = new Cell().Add(new Paragraph(cabecera))
                    .SetBackgroundColor(iText.Kernel.Colors.ColorConstants.LIGHT_GRAY)
                    .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                    .SetBold()
                    .SetFontColor(iText.Kernel.Colors.ColorConstants.DARK_GRAY)
                    .SetPadding(8)
                    .SetBorderTop(new SolidBorder(1)) // Borde superior
                    .SetBorderBottom(new SolidBorder(1)) // Borde inferior
                    .SetBorderLeft(new SolidBorder(1)) // Borde izquierdo
                    .SetBorderRight(new SolidBorder(1)); // Borde derecho
                table.AddHeaderCell(headerCell);
            }

            // Agregar las ventas a la tabla (con bordes)
            foreach (var venta in ventas)
            {
                // Insertar datos de venta
                foreach (var propiedad in propiedadesMostrar)
                {
                    var valor = venta.GetType().GetProperty(propiedad)?.GetValue(venta)?.ToString() ?? "N/A";

                    // Si la propiedad es la fecha de la venta, la formateamos correctamente
                    if (propiedad == "Fecha" && DateTime.TryParse(valor, out DateTime fechaVenta))
                    {
                        valor = fechaVenta.ToString("dd/MM/yyyy"); // Solo la fecha, sin la hora
                    }

                    var cell = new Cell().Add(new Paragraph(valor))
                        .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                        .SetPadding(8)
                        .SetBorderTop(new SolidBorder(1)) // Borde superior
                        .SetBorderBottom(new SolidBorder(1)) // Borde inferior
                        .SetBorderLeft(new SolidBorder(1)) // Borde izquierdo
                        .SetBorderRight(new SolidBorder(1)); // Borde derecho
                    table.AddCell(cell);
                }

                // Insertar detalles de la venta
                var detalles = venta.VentaDetalle_DTOs.Select(d => $"{d.IdProducto} x {d.Cantidad} a {d.Precio:C}").ToArray();
                var detallesCell = new Cell().Add(new Paragraph(string.Join(", ", detalles)))
                    .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                    .SetPadding(8)
                    .SetBorderTop(new SolidBorder(1))
                    .SetBorderBottom(new SolidBorder(1))
                    .SetBorderLeft(new SolidBorder(1))
                    .SetBorderRight(new SolidBorder(1));
                table.AddCell(detallesCell);
            }

            // Agregar la tabla al documento
            doc.Add(table);

            // Pie de página (información adicional de la empresa)
            Paragraph piePagina = new Paragraph()
                .Add(new Text("Tech Solutions S.A. | Todos los derechos reservados").SetFontSize(8).SetFontColor(iText.Kernel.Colors.ColorConstants.GRAY))
                .SetTextAlignment(iText.Layout.Properties.TextAlignment.CENTER)
                .SetFixedPosition(0, 30, PageSize.A4.GetWidth())
                .SetMarginTop(10);
            doc.Add(piePagina);

            // Cerrar el documento PDF
            doc.Close();
            writer.Close();

            // Convertir a base64
            byte[] buffer = ms.ToArray();
            string base64 = Convert.ToBase64String(buffer);
            string pdf = "data:application/pdf;base64," + base64;

            // Invocar función JavaScript para descargar el archivo PDF
            jsruntime.InvokeVoidAsync("descargarPDF", pdf);
        }
    }
}


}
