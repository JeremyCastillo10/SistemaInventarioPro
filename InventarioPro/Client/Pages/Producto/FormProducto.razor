@using CurrieTechnologies.Razor.SweetAlert2
@using InventarioPro.Shared.DTOS.Categoria
@using InventarioPro.Shared.DTOS.Producto
@inject SweetAlertService swal
@inject HttpClient Http
@inject Radzen.DialogService DialogService
@inject NavigationManager nav

<style>
    .custom-dialog {
        max-width: 900px;
        width: 100%;
    }
</style>

<EditForm Model="@Product" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <div class="custom-dialog" style="margin: auto; padding: 20px; border: 1px solid #e0e0e0; border-radius: 8px; background-color: white;">
        <h3 class="text-center">@((Product.Id == 0) ? "Agregar Nuevo Producto" : "Modificar Producto")</h3>

        <div style="display: flex; gap: 20px;">
            <div style="flex: 1;">
                <RadzenTextBox @bind-Value="Product.Nombre" Id="nombre" Placeholder="Nombre del Producto" Style="width: 100%; margin-bottom: 10px;" />
                <ValidationMessage For="@(() => Product.Nombre)" />

                <RadzenTextBox @bind-Value="Product.Descripcion" Id="descripcion" Placeholder="Descripción" Style="width: 100%; margin-bottom: 10px;" TextMode="TextMode.MultiLine" Rows="3" />
                <ValidationMessage For="@(() => Product.Descripcion)" />

                <RadzenDropDown @bind-Value="Product.CategoriaId" Id="categoria" Data="@categories" TextProperty="Nombre" ValueProperty="Id" Placeholder="Selecciona una Categoría" Style="width: 100%; margin-bottom: 10px;" />
                <ValidationMessage For="@(() => Product.CategoriaId)" />

                <label for="precio">Precio</label>
                <RadzenNumeric @bind-Value="Product.Precio" Id="precio" Placeholder="Precio" Style="width: 100%; margin-bottom: 10px;" />
                <ValidationMessage For="@(() => Product.Precio)" />

                <label for="costo">Costo</label>
                <RadzenNumeric @bind-Value="Product.Costo" Id="costo" Placeholder="Costo" Style="width: 100%; margin-bottom: 10px;" />
                <ValidationMessage For="@(() => Product.Costo)" />

                <RadzenTextBox @bind-Value="Product.Codigo" Id="codigo" Placeholder="Código del Producto" Style="width: 100%; margin-bottom: 10px;" />
                <ValidationMessage For="@(() => Product.Codigo)" />
                     <ValidationSummary></ValidationSummary>
            </div>

            <div style="flex: 0 0 300px; display: flex; flex-direction: column; align-items: center;">
                @if (string.IsNullOrEmpty(base64Image))
                {
                    <MudIcon Icon=@Icons.Material.Filled.Inventory Style="font-size: 250px; color: #4a4848; margin-bottom: 8px;" />
                }
                else
                {
                    <img src="data:image/jpeg;base64,@base64Image" alt="Imagen del Producto" style="max-width: 250px; margin-bottom: 8px;" />
                }

                <InputFile OnChange="HandleFileSelected" accept="image/*" style="width: 100%;" />

                @if (!string.IsNullOrEmpty(invalidFileMessage))
                {
                    <MudText Color="Color.Error">@invalidFileMessage</MudText>
                }
            </div>
        </div>

        <div class="d-flex justify-content-between mt-4">
            <MudButton ButtonType="ButtonType.Submit" Color="Color.Primary" Style="width: 48%;">@((Product.Id == 0) ? "Guardar Producto" : "Actualizar Producto")</MudButton>
            <MudButton Color="Color.Secondary" OnClick="Cancel" Style="width: 48%;">Cancelar</MudButton>
        </div>
    </div>
</EditForm>

@code {
    [Parameter]
    public Producto_DTO Product { get; set; } = new Producto_DTO();

    [Parameter]
    public string id { get; set; }

    private string base64Image;
    private string invalidFileMessage;
    private List<Categoria_DTO> categories;

    protected override async Task OnInitializedAsync()
    {
        await LoadCategories();
        if (Product.Id != 0)
        {
            base64Image = Product.ImagenProducto; 
        }
    }

    private async Task LoadCategories()
    {
        var response = await Http.GetAsync("api/categoria");
        if (response.IsSuccessStatusCode)
        {
            categories = await response.Content.ReadFromJsonAsync<List<Categoria_DTO>>();
        }
        else
        {
            await ShowAlert("Error", "No se pudieron cargar las categorías.", SweetAlertIcon.Error);
        }
    }

    private async Task LoadProduct(int productId)
    {
        var response = await Http.GetAsync($"api/producto/{productId}");
        if (response.IsSuccessStatusCode)
        {
            Product = await response.Content.ReadFromJsonAsync<Producto_DTO>();
            if (!string.IsNullOrEmpty(Product.ImagenProducto))
            {
                base64Image = Product.ImagenProducto; 
            }
        }
        else
        {
            await ShowAlert("Error", "No se pudo cargar el producto.", SweetAlertIcon.Error);
        }
    }


    private async Task HandleValidSubmit()
    {

        if (string.IsNullOrEmpty(base64Image))
        {
            await ShowAlert("Error", "La imagen del producto es requerida.", SweetAlertIcon.Error);
            return;
        }

        Product.ImagenProducto = base64Image;

        var response = await Http.PostAsJsonAsync("api/producto", Product);

        if (response.IsSuccessStatusCode)
        {
            await ShowAlert("Éxito", (Product.Id == 0) ? "Producto creado con éxito!" : "Producto actualizado con éxito!", SweetAlertIcon.Success);
            DialogService.Close(Product);
        }
        else
        {
            var errorMessage = await response.Content.ReadAsStringAsync();
            await ShowAlert("Error", $"No se pudo {(Product.Id == 0 ? "crear" : "actualizar")} el producto: {errorMessage}", SweetAlertIcon.Error);
        }
        nav.NavigateTo("/ListProductos");
    }


    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        var validationResult = ValidateFile(file);
        if (validationResult.IsValid)
        {
            var base64 = await ConvertFileToBase64(file);
            base64Image = base64;
            invalidFileMessage = null;
        }
        else
        {
            invalidFileMessage = validationResult.ErrorMessage;
        }
    }

    private async Task<string> ConvertFileToBase64(IBrowserFile file)
    {
        using var stream = new MemoryStream();
        await file.OpenReadStream(maxAllowedSize: 1_000_000).CopyToAsync(stream);
        return Convert.ToBase64String(stream.ToArray());
    }

    private (bool IsValid, string ErrorMessage) ValidateFile(IBrowserFile file)
    {
        var extension = Path.GetExtension(file.Name).ToLowerInvariant();
        if (extension != ".jpg" && extension != ".jpeg" && extension != ".png" && extension != ".gif" && extension != ".bmp")
        {
            return (false, "Por favor selecciona un archivo de imagen válido (JPEG, PNG, GIF, BMP).");
        }

        if (file.Size > 1_000_000)
        {
            return (false, "El archivo debe ser menor a 1 MB.");
        }

        return (true, null);
    }

    private async Task ShowAlert(string title, string text, SweetAlertIcon icon)
    {
        await swal.FireAsync(new SweetAlertOptions
            {
                Title = title,
                Text = text,
                Icon = icon,
                ConfirmButtonText = "OK"
            });
    }

    private void Cancel()
    {
        DialogService.Close(null);
    }
}
