@page "/ListProductos"
@using InventarioPro.Shared.DTOS.Categoria
@using Microsoft.AspNetCore.Components
@using OfficeOpenXml
@using Radzen
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using InventarioPro.Shared.DTOS.Producto
@using System.IO
@inject IJSRuntime jsruntime;
@inject HttpClient Http;

@inject Radzen.DialogService DialogService

<PageTitle>Inventario de Productos</PageTitle>

<div class="header">
    <h2>Inventario de Productos</h2>
    <RadzenButton Text="Agregar Producto" Click="OpenAddProductDialog" Style="margin-bottom: 10px;" />
</div>
<div class="filters" style="display: flex; flex-wrap: wrap; margin-bottom: 20px;">
    <div style="display: flex; align-items: center; flex-wrap: wrap; width: 100%; margin-bottom: 10px;">
        <RadzenDropDown @bind-Value="selectedCategory" Data="@categorias" TextProperty="Nombre" ValueProperty="Id" Placeholder="Categoría" Style="margin-right: 10px; flex: 1 1 150px;" />
        <RadzenDropDown @bind-Value="selectedWarehouse" Data="@warehouses" TextProperty="Name" ValueProperty="Id" Placeholder="Almacén" Style="margin-right: 10px; flex: 1 1 150px;" />
        <label style="margin-right: 5px;">Fecha Inicio:</label>
        <RadzenDatePicker @bind-Value=@value1 DateFormat="dd/MM/yyyy" Style="margin-right: 10px; flex: 1 1 150px;" />
        <label style="margin-right: 5px;">Fecha Fin:</label>
        <RadzenDatePicker @bind-Value=@value2 DateFormat="dd/MM/yyyy" Style="margin-right: 10px; flex: 1 1 150px;" />
        <RadzenTextBox @bind-Value="searchTerm" Placeholder="Buscar Producto" Style="flex: 2; min-width: 150px; margin-right: 10px;" />
        <RadzenButton Text="Filtrar" Click="FilterProducts" Style="margin-right: 10px;" />
    </div>
    <div style="display: flex; align-items: center; width: 100%;">
        <RadzenButton Text="Exportar a Excel" Click="exportarExcel" />
    </div>
</div>
<div style="max-height: 450px; overflow-y: auto;">
    <RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" AllowSorting="true" PageSize="8" AllowPaging="true"
                    Data="@filteredProducts" ColumnWidth="300px" ShowPagingSummary="true" @bind-Value="@selectedProducts">
        <Columns>
            <RadzenDataGridColumn Title="Foto" Width="180px" TextAlign="TextAlign.Center">
                <Template Context="data">
                    <RadzenImage Path="@($"data:image/jpeg;base64,{data.ImagenProducto}")"
                                 class="rz-product-image"
                                 AlternateText="@(data.Nombre)"
                                 Style="width: 60px; height: auto;" />
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(Producto_DTO.Nombre)" Title="Nombre del Producto" Width="190px" />
            <RadzenDataGridColumn Title="Categoría" Width="110px">
                <Template Context="data">
                    @((categorias.FirstOrDefault(c => c.Id == data.CategoriaId)?.Nombre) ?? "Sin Categoría")
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn Property="@nameof(Producto_DTO.FechaCreacion)" Filterable="false" Title="Fecha" Width="120px" FormatString="{0:dd/MM/yyyy}" />
            <RadzenDataGridColumn Property="@nameof(Producto_DTO.Precio)" Title="Precio" FormatString="{0:C}" Width="120px" />
            <RadzenDataGridColumn Property="@nameof(Producto_DTO.Costo)" Title="Costo" FormatString="{0:C}" Width="120px" />
            <RadzenDataGridColumn Property="@nameof(Producto_DTO.Existencia)" Title="Stock" Width="120px" />
            <RadzenDataGridColumn Title="Acciones" Width="120px">
                <Template Context="data">
                    <RadzenButton Text="Editar" Click="() => OpenEditProductDialog(data.Id)" />
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

<style>
    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    h2 {
        margin: 0;
        font-size: 24px;
    }

    .filters {
        margin-bottom: 20px;
    }
</style>

@code {
    private List<Producto_DTO> products = new List<Producto_DTO>();
    private List<Producto_DTO> filteredProducts = new List<Producto_DTO>();
    private IList<Producto_DTO> selectedProducts;
    private List<Categoria_DTO> categorias = new List<Categoria_DTO>();
    private int? selectedCategory;
    private int? selectedWarehouse;
    DateTime? value1 { get; set; } = DateTime.Today;
    DateTime? value2 { get; set; } = DateTime.Today;
    private string searchTerm;
    public string excel = "";



    protected override async Task OnInitializedAsync()
    {
        categorias = await Http.GetFromJsonAsync<List<Categoria_DTO>>("api/categoria");
        await LoadProducts();
        filteredProducts = products;
    }

    private List<Warehouse> warehouses = new List<Warehouse>
    {
        new Warehouse { Id = 1, Name = "Almacén A" },
        new Warehouse { Id = 2, Name = "Almacén B" },
        new Warehouse { Id = 3, Name = "Almacén C" }
    };

    private async Task LoadProducts()
    {
        products = await Http.GetFromJsonAsync<List<Producto_DTO>>("api/producto/GetProductos");
        filteredProducts = products; 
    }

    private async Task OpenAddProductDialog()
    {
        var newProduct = new Producto_DTO(); 
        var options = new Radzen.DialogOptions { Style = "width: 900px;" };
        var result = await DialogService.OpenAsync<FormProducto>("Agregar Nuevo Producto", new Dictionary<string, object> { { "Product", newProduct } }, options);

        if (result != null)
        {
            products.Add(result);
            await LoadProducts(); 
        }
    }


    private async Task FilterProducts()
    {
        try
        {
            List<Producto_DTO> allProducts = new List<Producto_DTO>();

            if (selectedCategory.HasValue)
            {
                allProducts = await Http.GetFromJsonAsync<List<Producto_DTO>>($"api/producto/GetPorCategoria/{selectedCategory.Value}");
            }
            else
            {
                allProducts = await Http.GetFromJsonAsync<List<Producto_DTO>>("api/producto/GetProductos");
            }

            if (value1.HasValue && value2.HasValue)
            {
                var filteredByDate = await Http.GetFromJsonAsync<List<Producto_DTO>>($"api/producto/FiltrarPorFechas/{value1.Value:yyyy-MM-dd}/{value2.Value:yyyy-MM-dd}");

                filteredProducts = allProducts
                    .Where(p => filteredByDate.Any(fd => fd.Id == p.Id))
                    .ToList();
            }
            else
            {
                filteredProducts = allProducts;
            }

            if (!string.IsNullOrWhiteSpace(searchTerm))
            {
                filteredProducts = filteredProducts
                    .Where(p => p.Nombre.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                    .ToList();
            }

        }
        catch (HttpRequestException ex)
        {
            filteredProducts = new List<Producto_DTO>();
        }
    }

    private async Task OpenEditProductDialog(int productId)
    {
        // Obtén el producto que deseas editar desde la API
        var response = await Http.GetAsync($"api/producto/GetProductoId/{productId}");

        if (response.IsSuccessStatusCode)
        {
            var productToEdit = await response.Content.ReadFromJsonAsync<Producto_DTO>();

            var options = new Radzen.DialogOptions { Style = "width: 900px;" };
            await DialogService.OpenAsync<FormProducto>("Editar Producto", new Dictionary<string, object> { { "Product", productToEdit } }, options);
        }
        else
        {
            var errorContent = await response.Content.ReadAsStringAsync();
        }
    }



    public void exportarExcel()
    {
        // Verifica si hay productos para exportar
        if (products == null || !products.Any())
        {
            // Manejar el caso cuando no hay productos (por ejemplo, mostrar un mensaje)
            Console.WriteLine("No hay productos para exportar.");
            return;
        }

        string[] cabecerasTabla = { "Nombre", "Existencia", "FechaCreacion", "Costo", "Precio" };
        string[] propiedadesMostrar = { "Nombre", "Existencia", "FechaCreacion", "Costo", "Precio" };

        using (MemoryStream ms = new MemoryStream())
        {
            ExcelPackage.LicenseContext = LicenseContext.NonCommercial;

            using (ExcelPackage ep = new ExcelPackage())
            {
                var worksheet = ep.Workbook.Worksheets.Add("Hoja");
                // Añade las cabeceras
                for (int i = 0; i < cabecerasTabla.Length; i++)
                {
                    worksheet.Column(i + 1).Width = 15;
                    worksheet.Cells[1, i + 1].Value = cabecerasTabla[i];
                }

                // Inicializa valores
                int fila = 2;
                foreach (var item in products)
                {
                    int col = 1;
                    foreach (string propiedad in propiedadesMostrar)
                    {
                        worksheet.Cells[fila, col].Value = item.GetType().GetProperty(propiedad)?.GetValue(item)?.ToString() ?? "N/A";
                        col++;
                    }
                    fila++;
                }

                ep.SaveAs(ms);
                byte[] buffer = ms.ToArray();
                string base64 = Convert.ToBase64String(buffer);
                excel = "data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64," + base64;
                jsruntime.InvokeVoidAsync("descargarExcel", excel);
            }
        }
    }


    public class Warehouse
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
}
