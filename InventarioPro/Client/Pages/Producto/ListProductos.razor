@page "/ListProductos"
@using InventarioPro.Shared.DTOS.Categoria
@using Microsoft.AspNetCore.Components
@using Radzen
@using System.Collections.Generic
@using System.Linq
@using System.Threading.Tasks
@using InventarioPro.Shared.DTOS.Producto
@inject HttpClient Http;

@inject Radzen.DialogService DialogService

<PageTitle>Inventario de Productos</PageTitle>

<div class="header">
    <h2>Inventario de Productos</h2>
    <RadzenButton Text="Agregar Producto" Click="OpenAddProductDialog" Style="margin-bottom: 10px;" />
</div>

<div class="filters">
    <RadzenDropDown @bind-Value="selectedCategory" Data="@categorias" TextProperty="Nombre" ValueProperty="Id" Placeholder="Selecciona una categoría" Style="width: 200px; margin-right: 10px;" />
    <RadzenDropDown @bind-Value="selectedWarehouse" Data="@warehouses" TextProperty="Name" ValueProperty="Id" Placeholder="Selecciona un almacén" Style="width: 200px; margin-right: 10px;" />
    <RadzenButton Text="Filtrar" Click="FilterProducts" Style="margin-right: 10px;" />
    <RadzenButton Text="Exportar a Excel" Click="ExportToExcel" />
</div>

<RadzenDataGrid AllowFiltering="true" AllowColumnResize="true" AllowAlternatingRows="true" AllowSorting="true" PageSize="5" AllowPaging="true"
                Data="@filteredProducts" ColumnWidth="300px" ShowPagingSummary="true" @bind-Value="@selectedProducts">
    <Columns>
        <RadzenDataGridColumn Title="Foto" Width="80px" TextAlign="TextAlign.Center">
            <Template Context="data">
                <RadzenImage Path="@($"data:image/jpeg;base64,{data.ImagenProducto}")"
                             class="rz-product-image"
                             AlternateText="@(data.Nombre)"
                             Style="width: 80px; height: auto;" />
            </Template>
        </RadzenDataGridColumn>
        <RadzenDataGridColumn Property="@nameof(Producto_DTO.Nombre)" Title="Nombre del Producto" Width="160px" />
        <RadzenDataGridColumn Title="Categoría" Width="110px">
            <Template Context="data">
                @((categorias.FirstOrDefault(c => c.Id == data.CategoriaId)?.Nombre) ?? "Sin Categoría")
            </Template>
        </RadzenDataGridColumn> 
        <RadzenDataGridColumn Property="@nameof(Producto_DTO.Precio)" Title="Precio" FormatString="{0:C}" Width="120px" />
        <RadzenDataGridColumn Property="@nameof(Producto_DTO.Costo)" Title="Costo" FormatString="{0:C}" Width="120px" />
        <RadzenDataGridColumn Property="@nameof(Producto_DTO.Existencia)" Title="Stock" Width="160px" />
    </Columns>
</RadzenDataGrid>

<style>
    .header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 20px;
    }

    h2 {
        margin: 0;
        font-size: 24px;
    }

    .filters {
        margin-bottom: 20px;
    }
</style>

@code {
    private List<Producto_DTO> products = new List<Producto_DTO>();
    private List<Producto_DTO> filteredProducts = new List<Producto_DTO>();
    private IList<Producto_DTO> selectedProducts;
    private List<Categoria_DTO> categorias = new List<Categoria_DTO>();
    private int? selectedCategory;
    private int? selectedWarehouse;

    protected override async Task OnInitializedAsync()
    {
        categorias = await Http.GetFromJsonAsync<List<Categoria_DTO>>("api/categoria");
        await LoadProducts();
        filteredProducts = products;
    }

    private List<Warehouse> warehouses = new List<Warehouse>
    {
        new Warehouse { Id = 1, Name = "Almacén A" },
        new Warehouse { Id = 2, Name = "Almacén B" },
        new Warehouse { Id = 3, Name = "Almacén C" }
    };

    private async Task LoadProducts()
    {
        products = await Http.GetFromJsonAsync<List<Producto_DTO>>("api/producto/GetProductos");
        filteredProducts = products; 
    }

    private async Task OpenAddProductDialog()
    {
        var options = new Radzen.DialogOptions { Style = "width: 900px;" };
        var result = await DialogService.OpenAsync<FormProducto>("Agregar Nuevo Producto", null, options);

        if (result != null)
        {
            products.Add(result);
            await FilterProducts(); 
        }
    }

    private async Task FilterProducts()
    {
        try
        {
            if (selectedCategory.HasValue)
            {
                var result = await Http.GetFromJsonAsync<List<Producto_DTO>>($"api/producto/GetPorCategoria/{selectedCategory.Value}");

                if (result == null || result.Count == 0)
                {
                    filteredProducts = new List<Producto_DTO>(); 
                                                                 
                }
                else
                {
                    filteredProducts = result; 
                }
            }
            else
            {
                filteredProducts = products; 
            }
        }
        catch (HttpRequestException ex)
        {
            filteredProducts = new List<Producto_DTO>(); 
        }
    }



    private void ExportToExcel()
    {
    }

    public class Warehouse
    {
        public int Id { get; set; }
        public string Name { get; set; }
    }
}
